import binascii

KEY=input("Enter the key ")#10110001000 or 10110001001


def text_to_bits(text, encoding='utf-8', errors='surrogatepass'):
    bits = bin(int(binascii.hexlify(text.encode(encoding, errors)), 16))[2:]
    return bits.zfill(8 * ((len(bits) + 7) // 8))

def text_from_bits(bits):
    n = int(bits, 2)
    n=n%128 #Most important line ---- Codemap can only map till 128.
    return chr(n)


FIXED_IP = [2, 6, 3, 1, 4, 8, 5, 7]
FIXED_EP = [4, 1, 2, 3, 2, 3, 4, 1]
FIXED_IP_INVERSE = [4, 1, 3, 5, 7, 2, 8, 6]
FIXED_P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
FIXED_P8 = [6, 3, 7, 4, 8, 5, 10, 9]
FIXED_P4 = [2, 4, 3, 1]


S0 = [[1, 0, 3, 2],
      [3, 2, 1, 0],
      [0, 2, 1, 3],
      [3, 1, 3, 2]]

S1 = [[0, 1, 2, 3],
      [2, 0, 1, 3],
      [3, 0, 1, 0],
      [2, 1, 0, 3]]

def permutate(original, fixed_key):
    new = ''
    for i in fixed_key:
        new += original[i - 1]
    return new


def left_half(bits):
    return bits[:int(len(bits)/2)]


def right_half(bits):
    return bits[int(len(bits)/2):]


def shift(bits):
    rotated_left_half = left_half(bits)[1:] + left_half(bits)[0]
    rotated_right_half = right_half(bits)[1:] + right_half(bits)[0]
    return rotated_left_half + rotated_right_half


def key1():
    #"Key 1=",permutate(shift(permutate(KEY, FIXED_P10)), FIXED_P8)
    return permutate(shift(permutate(KEY, FIXED_P10)), FIXED_P8)


def key2():
    #"Key 2=",permutate(shift(shift(shift(permutate(KEY, FIXED_P10)))), FIXED_P8)
    return permutate(shift(shift(shift(permutate(KEY, FIXED_P10)))), FIXED_P8)


def xor(bits, key):
    new = ''
    for bit, key_bit in zip(bits, key):
        new += str(((int(bit) + int(key_bit)) % 2))
    return new


def lookup_in_sbox(bits, sbox):
    row = int(bits[0] + bits[3], 2)
    col = int(bits[1] + bits[2], 2)
    return '{0:02b}'.format(sbox[row][col])


def f_k(bits, key):
    L = left_half(bits)
    R = right_half(bits)
    bits = permutate(R, FIXED_EP)
    bits = xor(bits, key)
    bits = lookup_in_sbox(left_half(bits), S0) + lookup_in_sbox(right_half(bits), S1)
    bits = permutate(bits, FIXED_P4)
    return xor(bits, L)

def swap(bits):
    L=right_half(bits)
    R=left_half(bits)
    bits=L+R
    return bits

def encrypt(plain_text):
    bits = permutate(plain_text, FIXED_IP)
    temp = f_k(bits, key1())
    bits = temp + right_half(bits)

    bits = swap(bits)
    temp = f_k(bits, key2())
    bits = temp + right_half(bits)
    
    bits = permutate(bits,FIXED_IP_INVERSE)
    return(bits)


def decrypt(cipher_text):
    bits = permutate(cipher_text, FIXED_IP)
    temp = f_k(bits, key2())
    bits = temp + right_half(bits)
    
    bits = swap(bits)
    temp = f_k(bits, key1())
    bits = temp + right_half(bits)
    
    bits = permutate(bits,FIXED_IP_INVERSE)
    return(bits)


def main():
        print("\n1. Encrypt \n2. Decrypt \n3.Normal Decrypt")
        choice=int(input("Enter your choice: "))
        choice2=input("Enter file name (with Extension): ")
        if(choice==1):
            f=open(choice2,"r")
            if f.mode =="r":
                contents = f.read()
                z=text_to_bits(contents)
            j=0
            x=int(len(z)/8)
            name=input("Enter the name of the file in which u want to store (with Extension): ")
            for i in range (0,x):
                c=z[j:j+8]
                d=encrypt(c)
                file = open(name,"a+")
                file.write(d)
                j=j+8
            print("Done Encrypting")
            
        elif (choice==2):
            f=open(choice2,"r")
            if f.mode =="r":
                contents = f.read()
                j=0
                x=int(len(contents)/8)
                name1=input("Enter the name of the file in which u want to store (with Extension): ")
                for i in range (0,x):
                    c=contents[j:j+8]
                    d=decrypt(c)
                    z=text_from_bits(d)
                    file = open(name1,"a+")
                    file.write(z)
                    j=j+8
            print("Done Decrypting")
        elif (choice==3):
            f=open(choice2,"r")
            if f.mode =="r":
                contents = f.read()
                j=0
                x=int(len(contents)/8)
                name1=input("Enter the name of the file in which u want to store (with Extension): ")
                for i in range (0,x):
                    c=contents[j:j+8]
                    z=text_from_bits(c)
                    file = open(name1,"a+")
                    file.write(z)
                    j=j+8
            print("Done Normal Decrypting")
        else:
            print("Wrong Choice")
            
if __name__=="__main__":
    main()